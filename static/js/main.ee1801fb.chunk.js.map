{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","ItemDisplay","title","this","props","imagesrc","concat","react_default","a","createElement","alt","src","PureComponent","App","loadMoreItems","page","console","log","_this","isFetching","loadMore","items","className","react_infinite_scroller_default","initialLoad","pageStart","hasMore","loader","key","map","item","App_ItemDisplay","id","Component","connect","state","dispatch","type","payload","createItems","numberToCreate","arguments","length","undefined","Array","from","v","k","newId","uuid","toString","intialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","store","createStore","combineReducers","action","Object","toConsumableArray","applyMiddleware","run","action$","pipe","ofType","delay","Math","floor","random","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iMCbAC,0LAEK,IACCC,EAAUC,KAAKC,MAAfF,MACFG,EAAQ,wCAAAC,OAA2CJ,GACzD,OAAOK,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,WAAMP,EACfK,EAAAC,EAAAC,cAAA,OAAKC,IAAKR,EAAOS,IAAKN,aANFO,kBAWpBC,6MAEJC,cAAgB,SAACC,GACfC,QAAQC,IAAI,eAAgBF,GACvBG,EAAKd,MAAMe,YACdD,EAAKd,MAAMgB,SAASL,GAEpBC,QAAQC,IAAI,wHAGP,IACCI,EAAUlB,KAAKC,MAAfiB,MACR,OACEd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEgB,aAAa,EACbC,UAAW,EACXL,SAAUjB,KAAKW,cACfY,SAAS,EACTC,OAAQpB,EAAAC,EAAAC,cAAA,OAAKa,UAAU,SAASM,IAAK,GAA7B,gBAERrB,EAAAC,EAAAC,cAAA,UACGY,EAAMQ,IAAI,SAAAC,GACT,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,CAAaH,IAAKE,EAAKE,GAAI9B,MAAO4B,EAAK5B,oBAvB1C+B,aA8CHC,cAfS,SAAAC,GAEtB,MAAO,CACLd,MAAOc,EAAMd,MACbF,WAAYgB,EAAMhB,aAIK,SAAAiB,GAAQ,MAAK,CACtChB,SAAU,SAACL,GAAD,OAAUqB,EAAS,CAC3BC,KAAM,YACNC,QAASvB,OAIEmB,CAGbrB,GCtDI0B,EAAc,SAACC,GAA6B,IAAbzB,EAAa0B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,EASxC,OARiBG,MAAMC,KAAK,CAAEH,OAAQF,GAAkB,SAACM,EAAGC,GACxD,IAAMC,EAAQC,MAAOC,WAAanC,EAAKmC,WACvC,MAAO,CACHlB,GAAIgB,EACJ9C,MAAK,SAAAI,OAAW0C,OAOtBG,EAAcZ,EAAY,IAoC1Ba,EAAmBvD,OAAOwD,sCAAwCC,IAElEC,EAAiBC,cAEjBC,EAAQC,YACVC,YAAgB,CAACtC,MAtCP,WAAiC,IAAhCc,EAAgCM,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAxBU,EAAaS,EAAWnB,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3C,OAAQiB,EAAOvB,MACX,IAAK,cACD,SAAA/B,OAAAuD,OAAAC,EAAA,EAAAD,CACO1B,GADP0B,OAAAC,EAAA,EAAAD,CAEOD,EAAOtB,UAElB,QACI,OAAOH,IA8BShB,WA1BT,WAA2B,IAA1BgB,EAA0BM,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAC1C,QAD0CA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC3BN,MACX,IAAK,YACD,OAAO,EACX,IAAK,cACD,OAAO,EACX,QACI,OAAOF,MAoBf,GACAiB,EAAiBW,YAAgBR,KAGrCA,EAAeS,IApBE,SAAAC,GAAO,OAAIA,EAAQC,KAChCC,YAAO,aACPC,YAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,MACvC1C,YAAI,SAAA+B,GAAM,MAAK,CACXvB,KAAM,cACNC,QAASC,EAAY,GAAIqB,EAAOtB,eAiBxCkC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAUjB,MAAOA,GAAOlD,EAAAC,EAAAC,cAACkE,EAAD,OACpCC,SAASC,eAAe,SFyDtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ee1801fb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component, PureComponent } from 'react';\nimport { connect } from 'react-redux'\nimport InfiniteScroll from 'react-infinite-scroller';\nimport './App.css';\n\nclass ItemDisplay extends PureComponent\n{\n  render() {\n    const { title } = this.props;\n    const imagesrc = `//via.placeholder.com/90x90.png?text=${title}`;\n    return <li><div>{title}\n      <img alt={title} src={imagesrc} />\n    </div></li>\n  }\n}\n\nclass App extends Component {\n\n  loadMoreItems = (page) => {\n    console.log(\"loading more\", page);\n    if (!this.props.isFetching)\n      this.props.loadMore(page);\n    else;\n      console.log(\"waiting on previous fetch to complete first\")\n  }\n\n  render() {\n    const { items } = this.props;\n    return (\n      <div className=\"App\">\n        <InfiniteScroll\n          initialLoad={false}\n          pageStart={0}\n          loadMore={this.loadMoreItems}\n          hasMore={true}        \n          loader={<div className=\"loader\" key={0}>Loading ...</div>}\n        >\n          <ul>\n            {items.map(item => {\n              return <ItemDisplay key={item.id} title={item.title} />\n            })}\n          </ul>\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  //console.log(\"state\", state)\n  return {\n    items: state.items,\n    isFetching: state.isFetching\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  loadMore: (page) => dispatch({\n    type: 'LOAD_MORE',\n    payload: page\n  })\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux'\nimport { createEpicMiddleware, ofType } from 'redux-observable';\nimport { delay, map } from 'rxjs/operators'\nimport uuid from 'uuidv4';\nimport './index.css';\nimport App from './App';\n\nconst createItems = (numberToCreate, page = 0) => {\n    const newItems = Array.from({ length: numberToCreate }, (v, k) => {\n        const newId = uuid().toString() + page.toString();\n        return {\n            id: newId,\n            title: `title-${newId}`\n        }\n    });\n\n    return newItems;\n}\n\nconst intialState = createItems(60);\n\n//reducer\nconst items = (state = intialState, action) => {\n    switch (action.type) {\n        case 'MORE_LOADED':\n            return [\n                ...state,\n                ...action.payload\n            ]\n        default:\n            return state\n    }\n}\n\nconst isFetching = (state = false, action) => {\n    switch (action.type) {\n        case 'LOAD_MORE':\n            return true;\n        case 'MORE_LOADED':\n            return false;\n        default:\n            return state\n    }\n}\n\nconst rootEpic = action$ => action$.pipe(\n    ofType('LOAD_MORE'),\n    delay(Math.floor(Math.random() * 301 + 200)), // Asynchronously wait then continue\n    map(action => ({\n        type: 'MORE_LOADED',\n        payload: createItems(30, action.payload)\n    }))\n);\n\n//to use with Chrome redux dev tool\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst epicMiddleware = createEpicMiddleware();\n\nconst store = createStore(\n    combineReducers({items, isFetching}),\n    {}, //initial state\n    composeEnhancers(applyMiddleware(epicMiddleware))\n);\n\nepicMiddleware.run(rootEpic);\n\nReactDOM.render(<Provider store={store}><App /></Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}